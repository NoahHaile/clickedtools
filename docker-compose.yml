version: '3.9'

services:
  auth:
    build:
      context: ./auth/backend
      dockerfile: Dockerfile
    ports:
      - "9191:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/core
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_KEY: ${JWT_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
    depends_on:
      - db
    networks:
      - app-network

  icebreaker-app:
    build:
      context: "./Project IceBreaker/icebreaker-backend"
      dockerfile: Dockerfile
    ports:
      - "9192:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/icebreaker_db
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_KEY: ${JWT_SECRET}
      API_KEY: ${API_KEY}
    depends_on:
      - db
    networks:
      - app-network

  db:
    image: postgres:15
    container_name: oauth-postgres-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init/postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin-oauth2
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "9190:8080"
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
